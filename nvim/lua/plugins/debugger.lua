return {}
------@diagnostic disable: missing-fields
---return {
---	{
---		"mfussenegger/nvim-dap",
---		dependencies = {
---			"rcarriga/nvim-dap-ui",
---			"mxsdev/nvim-dap-vscode-js",
---		},
---		config = function()
---			local dap = require("dap")
---			local ui = require("dapui")
---			local dap_utils = require("dap.utils")
---
---			ui.setup()
---
---			vim.keymap.set("n", "<space>b", dap.toggle_breakpoint)
---			vim.keymap.set("n", "<space>gb", dap.run_to_cursor)
---
---			vim.keymap.set("n", "<space>?", function()
---				require("dapui").eval(nil, { enter = true })
---			end)
---
---			vim.keymap.set("n", "<F1>", dap.continue)
---			vim.keymap.set("n", "<F2>", dap.step_into)
---			vim.keymap.set("n", "<F3>", dap.step_over)
---			vim.keymap.set("n", "<F4>", dap.step_out)
---			vim.keymap.set("n", "<F5>", dap.step_back)
---			vim.keymap.set("n", "<F13>", dap.restart)
---
---			-- stylua: ignore start
---			dap.listeners.before.attach.dapui_config = function() ui.open() end
---			dap.listeners.before.launch.dapui_config = function() ui.open() end
---			dap.listeners.before.event_terminated.dapui_config = function() ui.close() end
---			dap.listeners.before.event_exited.dapui_config = function() ui.close() end
---			-- stylua: ignore end
---
---			vim.fn.sign_define("DapBreakpoint", { text = "üü•", texthl = "", linehl = "", numhl = "" })
---			vim.fn.sign_define("DapStopped", { text = "‚≠êÔ∏è", texthl = "", linehl = "", numhl = "" })
---
---			require("dap-vscode-js").setup({
---				debugger_path = vim.fn.stdpath("data") .. "/mason/packages/js-debug-adapter",
---				debugger_cmd = { "js-debug-adapter" },
---				adapters = { "chrome", "pwa-node", "pwa-chrome", "pwa-msedge", "node-terminal", "pwa-extensionHost" },
---			})
---
---			local exts = {
---				"javascript",
---				"typescript",
---				"javascriptreact",
---				"typescriptreact",
---				"vue",
---				"svelte",
---			}
---
---			for _, ext in ipairs(exts) do
---				dap.configurations[ext] = {
---					{
---						type = "pwa-chrome",
---						request = "launch",
---						name = 'Launch Chrome with "localhost"',
---						url = function()
---							local co = coroutine.running()
---							return coroutine.create(function()
---								vim.ui.input({ prompt = "Enter URL: ", default = "http://localhost:3000" }, function(url)
---									if url == nil or url == "" then
---										return
---									else
---										coroutine.resume(co, url)
---									end
---								end)
---							end)
---						end,
---						port = 9222,
---						webRoot = vim.fn.getcwd(),
---						protocol = "inspector",
---						sourceMaps = true,
---						userDataDir = false,
---						skipFiles = { "<node_internals>/**", "node_modules/**", "${workspaceFolder}/node_modules/**" },
---						resolveSourceMapLocations = {
---							"${workspaceFolder}/apps/**/**",
---							"${workspaceFolder}/**",
---							"!**/node_modules/**",
---						},
---					},
---					{
---						type = "pwa-node",
---						request = "launch",
---						name = "Launch Current File (pwa-node)",
---						cwd = vim.fn.getcwd(),
---						args = { "${file}" },
---						sourceMaps = true,
---						protocol = "inspector",
---						resolveSourceMapLocations = {
---							"${workspaceFolder}/**",
---							"!**/node_modules/**",
---						},
---					},
---					{
---						type = "pwa-node",
---						request = "launch",
---						name = "Launch Current File (pwa-node with ts-node)",
---						cwd = vim.fn.getcwd(),
---						runtimeArgs = { "--loader", "ts-node/esm" },
---						runtimeExecutable = "node",
---						args = { "${file}" },
---						sourceMaps = true,
---						protocol = "inspector",
---						skipFiles = { "<node_internals>/**", "node_modules/**" },
---						resolveSourceMapLocations = {
---							"${workspaceFolder}/**",
---							"!**/node_modules/**",
---						},
---					},
---					{
---						type = "pwa-node",
---						request = "launch",
---						name = "Launch Test Current File (pwa-node with jest)",
---						cwd = vim.fn.getcwd(),
---						runtimeArgs = { "${workspaceFolder}/node_modules/.bin/jest" },
---						runtimeExecutable = "node",
---						args = { "${file}", "--coverage", "false" },
---						rootPath = "${workspaceFolder}",
---						sourceMaps = true,
---						console = "integratedTerminal",
---						internalConsoleOptions = "neverOpen",
---						skipFiles = { "<node_internals>/**", "node_modules/**" },
---					},
---					{
---						type = "pwa-node",
---						request = "launch",
---						name = "Launch Test Current File (pwa-node with vitest)",
---						cwd = vim.fn.getcwd(),
---						program = "${workspaceFolder}/node_modules/vitest/vitest.mjs",
---						args = { "--inspect-brk", "--threads", "false", "run", "${file}" },
---						autoAttachChildProcesses = true,
---						smartStep = true,
---						console = "integratedTerminal",
---						skipFiles = { "<node_internals>/**", "node_modules/**" },
---					},
---					{
---						type = "pwa-node",
---						request = "launch",
---						name = "Launch Test Current File (pwa-node with deno)",
---						cwd = vim.fn.getcwd(),
---						runtimeArgs = { "test", "--inspect-brk", "--allow-all", "${file}" },
---						runtimeExecutable = "deno",
---						attachSimplePort = 9229,
---					},
---					{
---						type = "pwa-chrome",
---						request = "attach",
---						name = "Attach Program (pwa-chrome, select port)",
---						program = "${file}",
---						cwd = vim.fn.getcwd(),
---						sourceMaps = true,
---						protocol = "inspector",
---						port = function()
---							return vim.fn.input("Select port: ", 9222)
---						end,
---						webRoot = "${workspaceFolder}",
---						skipFiles = { "<node_internals>/**", "node_modules/**" },
---					},
---					{
---						type = "pwa-node",
---						request = "attach",
---						name = "Attach Program (pwa-node, select pid)",
---						cwd = vim.fn.getcwd(),
---						processId = dap_utils.pick_process,
---						skipFiles = { "<node_internals>/**" },
---					},
---				}
---			end
---		end,
---	},
---}
