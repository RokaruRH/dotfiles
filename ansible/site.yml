---
- name: Arch Linux Setup and Dotfiles Configuration
  hosts: localhost
  connection: local
  become: yes
  vars:
    user_name: "{{ ansible_user_id }}"
    user_home: "{{ ansible_env.HOME }}"
    dotfiles_dir: "{{ user_home }}/dotfiles"

  tasks:
    - name: Update pacman package cache
      pacman:
        update_cache: yes

    - name: Install base development packages
      pacman:
        name:
          - base-devel
          - git
          - curl
          - wget
        state: present

    - name: Install fish shell
      pacman:
        name: fish
        state: present

    - name: Set fish as default shell for user
      user:
        name: "{{ user_name }}"
        shell: /usr/bin/fish
      become: yes

    - name: Install text editor (neovim)
      pacman:
        name: neovim
        state: present

    - name: Enable multilib repository
      lineinfile:
        path: /etc/pacman.conf
        regexp: '^#\[multilib\]'
        line: "[multilib]"
        state: present

    - name: Enable multilib include line
      lineinfile:
        path: /etc/pacman.conf
        regexp: "^#Include = /etc/pacman.d/mirrorlist"
        line: "Include = /etc/pacman.d/mirrorlist"
        insertafter: '^\[multilib\]'
        state: present

    - name: Update pacman cache after multilib enable
      pacman:
        update_cache: yes

    - name: Install NVIDIA drivers (if needed)
      pacman:
        name:
          - nvidia
          - nvidia-utils
          - lib32-nvidia-utils
        state: present
      ignore_errors: yes

    - name: Install KDE Plasma desktop environment
      pacman:
        name:
          - plasma-desktop
          - plasma-pa
          - plasma-nm
          - plasma-firewall
          - kscreen
          - bluedevil
          - powerdevil
          - power-profiles-daemon
          - dolphin
          - ark
          - spectacle
        state: present

    - name: Install SDDM display manager
      pacman:
        name: sddm
        state: present

    - name: Enable SDDM service
      systemd:
        name: sddm
        enabled: yes

    - name: Install additional useful packages
      pacman:
        name:
          - wezterm
          - fzf
          - ripgrep
          - fd
          - bat
          - git-delta
          - lazygit
          - lazydocker
          - appimagelauncher
          - btop
          - openbsd-netcat
          - rsync
        state: present

    - name: Install Hyprland packages (optional)
      pacman:
        name:
          - hyprland
          - uwsm
          - libnewt
          - waybar
          - rofi-wayland
        state: present
      ignore_errors: yes

    - name: Create AUR directory
      file:
        path: "{{ user_home }}/aur"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: "0755"
      become: no

    - name: Clone yay AUR helper
      git:
        repo: https://aur.archlinux.org/yay.git
        dest: "{{ user_home }}/aur/yay"
        force: yes
      become: no

    - name: Build and install yay
      shell: |
        cd {{ user_home }}/aur/yay
        makepkg -si --noconfirm
      become: no
      args:
        creates: /usr/bin/yay

    - name: Create .config directory
      file:
        path: "{{ user_home }}/.config"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: "0755"
      become: no

    - name: Create kwallet config to disable annoying popup
      copy:
        content: |
          [Wallet]
          Enabled=false
        dest: "{{ user_home }}/.config/kwalletrc"
        owner: "{{ user_name }}"
        group: "{{ user_name }}"
        mode: "0644"
      become: no

    - name: Check if rustup is installed
      stat:
        path: "{{ user_home }}/.cargo/bin/rustup"
      register: rustup_installed
      become: no

    - name: Download rustup installer
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/rustup-init.sh
        mode: "0755"
      when: not rustup_installed.stat.exists
      become: no

    - name: Install Rust via rustup
      shell: |
        /tmp/rustup-init.sh -y --default-toolchain stable
      environment:
        HOME: "{{ user_home }}"
      when: not rustup_installed.stat.exists
      become: no

    - name: Source cargo environment
      shell: source {{ user_home }}/.cargo/env
      args:
        executable: /bin/bash
      become: no
      when: not rustup_installed.stat.exists

    - name: Check if symm is installed
      stat:
        path: "{{ user_home }}/.cargo/bin/symm"
      register: symm_installed
      become: no

    - name: Install symm via cargo
      shell: |
        source {{ user_home }}/.cargo/env
        cargo install symm
      args:
        executable: /bin/bash
      environment:
        HOME: "{{ user_home }}"
      when: not symm_installed.stat.exists
      become: no

    - name: Clone dotfiles repository (if not exists)
      git:
        repo: "{{ dotfiles_repo | default('https://github.com/yourusername/dotfiles.git') }}"
        dest: "{{ dotfiles_dir }}"
        force: no
      become: no
      when: dotfiles_repo is defined

    - name: Check if dotfiles directory exists
      stat:
        path: "{{ dotfiles_dir }}"
      register: dotfiles_exists
      become: no

    - name: Link dotfiles using symm
      shell: |
        source {{ user_home }}/.cargo/env
        cd {{ dotfiles_dir }}
        symm link
      args:
        executable: /bin/bash
      environment:
        HOME: "{{ user_home }}"
      when: dotfiles_exists.stat.exists
      become: no

    - name: Display completion message
      debug:
        msg: |
          Arch Linux setup complete!

          Next steps:
          1. Reboot to start SDDM display manager
          2. If you haven't cloned your dotfiles yet, run:
             git clone <your-dotfiles-repo> ~/dotfiles
             cd ~/dotfiles
             symm link
          3. Configure your desktop environment

          Installed components:
          - KDE Plasma Desktop
          - SDDM Display Manager
          - Fish Shell (set as default)
          - Neovim
          - Rust (via rustup)
          - Symm (via cargo)
          - YAY AUR helper
          - Various development and utility tools
